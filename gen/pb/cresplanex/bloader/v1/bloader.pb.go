// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: cresplanex/bloader/v1/bloader.proto

package bloaderv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SlaveCommandDefaultStoreType int32

const (
	SlaveCommandDefaultStoreType_SLAVE_COMMAND_DEFAULT_STORE_TYPE_UNSPECIFIED       SlaveCommandDefaultStoreType = 0
	SlaveCommandDefaultStoreType_SLAVE_COMMAND_DEFAULT_STORE_TYPE_STORE             SlaveCommandDefaultStoreType = 1
	SlaveCommandDefaultStoreType_SLAVE_COMMAND_DEFAULT_STORE_TYPE_THREAD_ONLY_STORE SlaveCommandDefaultStoreType = 2
	SlaveCommandDefaultStoreType_SLAVE_COMMAND_DEFAULT_STORE_TYPE_SLAVE_VALUES      SlaveCommandDefaultStoreType = 3
)

// Enum value maps for SlaveCommandDefaultStoreType.
var (
	SlaveCommandDefaultStoreType_name = map[int32]string{
		0: "SLAVE_COMMAND_DEFAULT_STORE_TYPE_UNSPECIFIED",
		1: "SLAVE_COMMAND_DEFAULT_STORE_TYPE_STORE",
		2: "SLAVE_COMMAND_DEFAULT_STORE_TYPE_THREAD_ONLY_STORE",
		3: "SLAVE_COMMAND_DEFAULT_STORE_TYPE_SLAVE_VALUES",
	}
	SlaveCommandDefaultStoreType_value = map[string]int32{
		"SLAVE_COMMAND_DEFAULT_STORE_TYPE_UNSPECIFIED":       0,
		"SLAVE_COMMAND_DEFAULT_STORE_TYPE_STORE":             1,
		"SLAVE_COMMAND_DEFAULT_STORE_TYPE_THREAD_ONLY_STORE": 2,
		"SLAVE_COMMAND_DEFAULT_STORE_TYPE_SLAVE_VALUES":      3,
	}
)

func (x SlaveCommandDefaultStoreType) Enum() *SlaveCommandDefaultStoreType {
	p := new(SlaveCommandDefaultStoreType)
	*p = x
	return p
}

func (x SlaveCommandDefaultStoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlaveCommandDefaultStoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_cresplanex_bloader_v1_bloader_proto_enumTypes[0].Descriptor()
}

func (SlaveCommandDefaultStoreType) Type() protoreflect.EnumType {
	return &file_cresplanex_bloader_v1_bloader_proto_enumTypes[0]
}

func (x SlaveCommandDefaultStoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlaveCommandDefaultStoreType.Descriptor instead.
func (SlaveCommandDefaultStoreType) EnumDescriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{0}
}

type CallExecOutputType int32

const (
	CallExecOutputType_CALL_EXEC_OUTPUT_TYPE_UNSPECIFIED CallExecOutputType = 0
	CallExecOutputType_CALL_EXEC_OUTPUT_TYPE_HTTP        CallExecOutputType = 1
)

// Enum value maps for CallExecOutputType.
var (
	CallExecOutputType_name = map[int32]string{
		0: "CALL_EXEC_OUTPUT_TYPE_UNSPECIFIED",
		1: "CALL_EXEC_OUTPUT_TYPE_HTTP",
	}
	CallExecOutputType_value = map[string]int32{
		"CALL_EXEC_OUTPUT_TYPE_UNSPECIFIED": 0,
		"CALL_EXEC_OUTPUT_TYPE_HTTP":        1,
	}
)

func (x CallExecOutputType) Enum() *CallExecOutputType {
	p := new(CallExecOutputType)
	*p = x
	return p
}

func (x CallExecOutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallExecOutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_cresplanex_bloader_v1_bloader_proto_enumTypes[1].Descriptor()
}

func (CallExecOutputType) Type() protoreflect.EnumType {
	return &file_cresplanex_bloader_v1_bloader_proto_enumTypes[1]
}

func (x CallExecOutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallExecOutputType.Descriptor instead.
func (CallExecOutputType) EnumDescriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{1}
}

type RequestType int32

const (
	RequestType_REQUEST_TYPE_UNSPECIFIED             RequestType = 0
	RequestType_REQUEST_TYPE_REQUEST_RESOURCE_LOADER RequestType = 1
	RequestType_REQUEST_TYPE_REQUEST_RESOURCE_AUTH   RequestType = 2
	RequestType_REQUEST_TYPE_STORE                   RequestType = 3
	RequestType_REQUEST_TYPE_REQUEST_RESOURCE_STORE  RequestType = 4
	RequestType_REQUEST_TYPE_REQUEST_RESOURCE_TARGET RequestType = 5
)

// Enum value maps for RequestType.
var (
	RequestType_name = map[int32]string{
		0: "REQUEST_TYPE_UNSPECIFIED",
		1: "REQUEST_TYPE_REQUEST_RESOURCE_LOADER",
		2: "REQUEST_TYPE_REQUEST_RESOURCE_AUTH",
		3: "REQUEST_TYPE_STORE",
		4: "REQUEST_TYPE_REQUEST_RESOURCE_STORE",
		5: "REQUEST_TYPE_REQUEST_RESOURCE_TARGET",
	}
	RequestType_value = map[string]int32{
		"REQUEST_TYPE_UNSPECIFIED":             0,
		"REQUEST_TYPE_REQUEST_RESOURCE_LOADER": 1,
		"REQUEST_TYPE_REQUEST_RESOURCE_AUTH":   2,
		"REQUEST_TYPE_STORE":                   3,
		"REQUEST_TYPE_REQUEST_RESOURCE_STORE":  4,
		"REQUEST_TYPE_REQUEST_RESOURCE_TARGET": 5,
	}
)

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}

func (x RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_cresplanex_bloader_v1_bloader_proto_enumTypes[2].Descriptor()
}

func (RequestType) Type() protoreflect.EnumType {
	return &file_cresplanex_bloader_v1_bloader_proto_enumTypes[2]
}

func (x RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestType.Descriptor instead.
func (RequestType) EnumDescriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{2}
}

type ConnectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Environment   string                 `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type ConnectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectResponse) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type DisconnectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectRequest) Reset() {
	*x = DisconnectRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRequest) ProtoMessage() {}

func (x *DisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRequest.ProtoReflect.Descriptor instead.
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{2}
}

func (x *DisconnectRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type DisconnectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectResponse) Reset() {
	*x = DisconnectResponse{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectResponse) ProtoMessage() {}

func (x *DisconnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectResponse.ProtoReflect.Descriptor instead.
func (*DisconnectResponse) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{3}
}

type SlaveCommandRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	LoaderId      string                 `protobuf:"bytes,2,opt,name=loader_id,json=loaderId,proto3" json:"loader_id,omitempty"`
	OutputRoot    string                 `protobuf:"bytes,3,opt,name=output_root,json=outputRoot,proto3" json:"output_root,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SlaveCommandRequest) Reset() {
	*x = SlaveCommandRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SlaveCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlaveCommandRequest) ProtoMessage() {}

func (x *SlaveCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlaveCommandRequest.ProtoReflect.Descriptor instead.
func (*SlaveCommandRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{4}
}

func (x *SlaveCommandRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *SlaveCommandRequest) GetLoaderId() string {
	if x != nil {
		return x.LoaderId
	}
	return ""
}

func (x *SlaveCommandRequest) GetOutputRoot() string {
	if x != nil {
		return x.OutputRoot
	}
	return ""
}

type SlaveCommandResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommandId     string                 `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SlaveCommandResponse) Reset() {
	*x = SlaveCommandResponse{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SlaveCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlaveCommandResponse) ProtoMessage() {}

func (x *SlaveCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlaveCommandResponse.ProtoReflect.Descriptor instead.
func (*SlaveCommandResponse) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{5}
}

func (x *SlaveCommandResponse) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

type SlaveCommandDefaultStoreRequest struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	ConnectionId  string                       `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	CommandId     string                       `protobuf:"bytes,2,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	StoreType     SlaveCommandDefaultStoreType `protobuf:"varint,3,opt,name=store_type,json=storeType,proto3,enum=cresplanex.bloader.v1.SlaveCommandDefaultStoreType" json:"store_type,omitempty"`
	DefaultStore  []byte                       `protobuf:"bytes,4,opt,name=default_store,json=defaultStore,proto3" json:"default_store,omitempty"`
	IsLastChunk   bool                         `protobuf:"varint,5,opt,name=is_last_chunk,json=isLastChunk,proto3" json:"is_last_chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SlaveCommandDefaultStoreRequest) Reset() {
	*x = SlaveCommandDefaultStoreRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SlaveCommandDefaultStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlaveCommandDefaultStoreRequest) ProtoMessage() {}

func (x *SlaveCommandDefaultStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlaveCommandDefaultStoreRequest.ProtoReflect.Descriptor instead.
func (*SlaveCommandDefaultStoreRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{6}
}

func (x *SlaveCommandDefaultStoreRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *SlaveCommandDefaultStoreRequest) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

func (x *SlaveCommandDefaultStoreRequest) GetStoreType() SlaveCommandDefaultStoreType {
	if x != nil {
		return x.StoreType
	}
	return SlaveCommandDefaultStoreType_SLAVE_COMMAND_DEFAULT_STORE_TYPE_UNSPECIFIED
}

func (x *SlaveCommandDefaultStoreRequest) GetDefaultStore() []byte {
	if x != nil {
		return x.DefaultStore
	}
	return nil
}

func (x *SlaveCommandDefaultStoreRequest) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

type SlaveCommandDefaultStoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SlaveCommandDefaultStoreResponse) Reset() {
	*x = SlaveCommandDefaultStoreResponse{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SlaveCommandDefaultStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlaveCommandDefaultStoreResponse) ProtoMessage() {}

func (x *SlaveCommandDefaultStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlaveCommandDefaultStoreResponse.ProtoReflect.Descriptor instead.
func (*SlaveCommandDefaultStoreResponse) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{7}
}

type CallExecRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	CommandId     string                 `protobuf:"bytes,2,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallExecRequest) Reset() {
	*x = CallExecRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallExecRequest) ProtoMessage() {}

func (x *CallExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallExecRequest.ProtoReflect.Descriptor instead.
func (*CallExecRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{8}
}

func (x *CallExecRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *CallExecRequest) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

type CallExecResponse struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	OutputId   string                 `protobuf:"bytes,1,opt,name=output_id,json=outputId,proto3" json:"output_id,omitempty"`
	OutputType CallExecOutputType     `protobuf:"varint,2,opt,name=output_type,json=outputType,proto3,enum=cresplanex.bloader.v1.CallExecOutputType" json:"output_type,omitempty"`
	OutputRoot string                 `protobuf:"bytes,3,opt,name=output_root,json=outputRoot,proto3" json:"output_root,omitempty"`
	// Types that are valid to be assigned to Output:
	//
	//	*CallExecResponse_OutputHttp
	Output        isCallExecResponse_Output `protobuf_oneof:"output"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallExecResponse) Reset() {
	*x = CallExecResponse{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallExecResponse) ProtoMessage() {}

func (x *CallExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallExecResponse.ProtoReflect.Descriptor instead.
func (*CallExecResponse) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{9}
}

func (x *CallExecResponse) GetOutputId() string {
	if x != nil {
		return x.OutputId
	}
	return ""
}

func (x *CallExecResponse) GetOutputType() CallExecOutputType {
	if x != nil {
		return x.OutputType
	}
	return CallExecOutputType_CALL_EXEC_OUTPUT_TYPE_UNSPECIFIED
}

func (x *CallExecResponse) GetOutputRoot() string {
	if x != nil {
		return x.OutputRoot
	}
	return ""
}

func (x *CallExecResponse) GetOutput() isCallExecResponse_Output {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *CallExecResponse) GetOutputHttp() *CallExecOutputHTTP {
	if x != nil {
		if x, ok := x.Output.(*CallExecResponse_OutputHttp); ok {
			return x.OutputHttp
		}
	}
	return nil
}

type isCallExecResponse_Output interface {
	isCallExecResponse_Output()
}

type CallExecResponse_OutputHttp struct {
	OutputHttp *CallExecOutputHTTP `protobuf:"bytes,4,opt,name=output_http,json=outputHttp,proto3,oneof"`
}

func (*CallExecResponse_OutputHttp) isCallExecResponse_Output() {}

type CallExecOutputHTTP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []string               `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallExecOutputHTTP) Reset() {
	*x = CallExecOutputHTTP{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallExecOutputHTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallExecOutputHTTP) ProtoMessage() {}

func (x *CallExecOutputHTTP) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallExecOutputHTTP.ProtoReflect.Descriptor instead.
func (*CallExecOutputHTTP) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{10}
}

func (x *CallExecOutputHTTP) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReceiveChanelConnectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceiveChanelConnectRequest) Reset() {
	*x = ReceiveChanelConnectRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveChanelConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveChanelConnectRequest) ProtoMessage() {}

func (x *ReceiveChanelConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveChanelConnectRequest.ProtoReflect.Descriptor instead.
func (*ReceiveChanelConnectRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{11}
}

func (x *ReceiveChanelConnectRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type ReceiveChanelConnectResponse struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	RequestId   string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	RequestType RequestType            `protobuf:"varint,2,opt,name=request_type,json=requestType,proto3,enum=cresplanex.bloader.v1.RequestType" json:"request_type,omitempty"`
	// Types that are valid to be assigned to Request:
	//
	//	*ReceiveChanelConnectResponse_LoaderResourceRequest
	//	*ReceiveChanelConnectResponse_AuthResourceRequest
	//	*ReceiveChanelConnectResponse_Store
	//	*ReceiveChanelConnectResponse_StoreResourceRequest
	//	*ReceiveChanelConnectResponse_TargetResourceRequest
	Request       isReceiveChanelConnectResponse_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceiveChanelConnectResponse) Reset() {
	*x = ReceiveChanelConnectResponse{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveChanelConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveChanelConnectResponse) ProtoMessage() {}

func (x *ReceiveChanelConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveChanelConnectResponse.ProtoReflect.Descriptor instead.
func (*ReceiveChanelConnectResponse) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{12}
}

func (x *ReceiveChanelConnectResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ReceiveChanelConnectResponse) GetRequestType() RequestType {
	if x != nil {
		return x.RequestType
	}
	return RequestType_REQUEST_TYPE_UNSPECIFIED
}

func (x *ReceiveChanelConnectResponse) GetRequest() isReceiveChanelConnectResponse_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ReceiveChanelConnectResponse) GetLoaderResourceRequest() *ReceiveChanelConnectLoaderResourceRequest {
	if x != nil {
		if x, ok := x.Request.(*ReceiveChanelConnectResponse_LoaderResourceRequest); ok {
			return x.LoaderResourceRequest
		}
	}
	return nil
}

func (x *ReceiveChanelConnectResponse) GetAuthResourceRequest() *ReceiveChanelConnectAuthResourceRequest {
	if x != nil {
		if x, ok := x.Request.(*ReceiveChanelConnectResponse_AuthResourceRequest); ok {
			return x.AuthResourceRequest
		}
	}
	return nil
}

func (x *ReceiveChanelConnectResponse) GetStore() *ReceiveChanelConnectStore {
	if x != nil {
		if x, ok := x.Request.(*ReceiveChanelConnectResponse_Store); ok {
			return x.Store
		}
	}
	return nil
}

func (x *ReceiveChanelConnectResponse) GetStoreResourceRequest() *ReceiveChanelConnectStoreResourceRequest {
	if x != nil {
		if x, ok := x.Request.(*ReceiveChanelConnectResponse_StoreResourceRequest); ok {
			return x.StoreResourceRequest
		}
	}
	return nil
}

func (x *ReceiveChanelConnectResponse) GetTargetResourceRequest() *ReceiveChanelConnectTargetResourceRequest {
	if x != nil {
		if x, ok := x.Request.(*ReceiveChanelConnectResponse_TargetResourceRequest); ok {
			return x.TargetResourceRequest
		}
	}
	return nil
}

type isReceiveChanelConnectResponse_Request interface {
	isReceiveChanelConnectResponse_Request()
}

type ReceiveChanelConnectResponse_LoaderResourceRequest struct {
	LoaderResourceRequest *ReceiveChanelConnectLoaderResourceRequest `protobuf:"bytes,3,opt,name=loader_resource_request,json=loaderResourceRequest,proto3,oneof"`
}

type ReceiveChanelConnectResponse_AuthResourceRequest struct {
	AuthResourceRequest *ReceiveChanelConnectAuthResourceRequest `protobuf:"bytes,4,opt,name=auth_resource_request,json=authResourceRequest,proto3,oneof"`
}

type ReceiveChanelConnectResponse_Store struct {
	Store *ReceiveChanelConnectStore `protobuf:"bytes,5,opt,name=store,proto3,oneof"`
}

type ReceiveChanelConnectResponse_StoreResourceRequest struct {
	StoreResourceRequest *ReceiveChanelConnectStoreResourceRequest `protobuf:"bytes,6,opt,name=store_resource_request,json=storeResourceRequest,proto3,oneof"`
}

type ReceiveChanelConnectResponse_TargetResourceRequest struct {
	TargetResourceRequest *ReceiveChanelConnectTargetResourceRequest `protobuf:"bytes,7,opt,name=target_resource_request,json=targetResourceRequest,proto3,oneof"`
}

func (*ReceiveChanelConnectResponse_LoaderResourceRequest) isReceiveChanelConnectResponse_Request() {}

func (*ReceiveChanelConnectResponse_AuthResourceRequest) isReceiveChanelConnectResponse_Request() {}

func (*ReceiveChanelConnectResponse_Store) isReceiveChanelConnectResponse_Request() {}

func (*ReceiveChanelConnectResponse_StoreResourceRequest) isReceiveChanelConnectResponse_Request() {}

func (*ReceiveChanelConnectResponse_TargetResourceRequest) isReceiveChanelConnectResponse_Request() {}

type ReceiveChanelConnectLoaderResourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LoaderId      string                 `protobuf:"bytes,1,opt,name=loader_id,json=loaderId,proto3" json:"loader_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceiveChanelConnectLoaderResourceRequest) Reset() {
	*x = ReceiveChanelConnectLoaderResourceRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveChanelConnectLoaderResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveChanelConnectLoaderResourceRequest) ProtoMessage() {}

func (x *ReceiveChanelConnectLoaderResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveChanelConnectLoaderResourceRequest.ProtoReflect.Descriptor instead.
func (*ReceiveChanelConnectLoaderResourceRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{13}
}

func (x *ReceiveChanelConnectLoaderResourceRequest) GetLoaderId() string {
	if x != nil {
		return x.LoaderId
	}
	return ""
}

type ReceiveChanelConnectAuthResourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AuthId        string                 `protobuf:"bytes,1,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	IsDefault     bool                   `protobuf:"varint,2,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceiveChanelConnectAuthResourceRequest) Reset() {
	*x = ReceiveChanelConnectAuthResourceRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveChanelConnectAuthResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveChanelConnectAuthResourceRequest) ProtoMessage() {}

func (x *ReceiveChanelConnectAuthResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveChanelConnectAuthResourceRequest.ProtoReflect.Descriptor instead.
func (*ReceiveChanelConnectAuthResourceRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{14}
}

func (x *ReceiveChanelConnectAuthResourceRequest) GetAuthId() string {
	if x != nil {
		return x.AuthId
	}
	return ""
}

func (x *ReceiveChanelConnectAuthResourceRequest) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type ReceiveChanelConnectStore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	IsLastChunk   bool                   `protobuf:"varint,3,opt,name=is_last_chunk,json=isLastChunk,proto3" json:"is_last_chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceiveChanelConnectStore) Reset() {
	*x = ReceiveChanelConnectStore{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveChanelConnectStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveChanelConnectStore) ProtoMessage() {}

func (x *ReceiveChanelConnectStore) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveChanelConnectStore.ProtoReflect.Descriptor instead.
func (*ReceiveChanelConnectStore) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{15}
}

func (x *ReceiveChanelConnectStore) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ReceiveChanelConnectStore) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReceiveChanelConnectStore) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

type ReceiveChanelConnectStoreResourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	IsLastChunk   bool                   `protobuf:"varint,3,opt,name=is_last_chunk,json=isLastChunk,proto3" json:"is_last_chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceiveChanelConnectStoreResourceRequest) Reset() {
	*x = ReceiveChanelConnectStoreResourceRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveChanelConnectStoreResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveChanelConnectStoreResourceRequest) ProtoMessage() {}

func (x *ReceiveChanelConnectStoreResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveChanelConnectStoreResourceRequest.ProtoReflect.Descriptor instead.
func (*ReceiveChanelConnectStoreResourceRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{16}
}

func (x *ReceiveChanelConnectStoreResourceRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ReceiveChanelConnectStoreResourceRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReceiveChanelConnectStoreResourceRequest) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

type ReceiveChanelConnectTargetResourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetId      string                 `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceiveChanelConnectTargetResourceRequest) Reset() {
	*x = ReceiveChanelConnectTargetResourceRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveChanelConnectTargetResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveChanelConnectTargetResourceRequest) ProtoMessage() {}

func (x *ReceiveChanelConnectTargetResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveChanelConnectTargetResourceRequest.ProtoReflect.Descriptor instead.
func (*ReceiveChanelConnectTargetResourceRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{17}
}

func (x *ReceiveChanelConnectTargetResourceRequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

type SendLoaderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	LoaderId      string                 `protobuf:"bytes,2,opt,name=loader_id,json=loaderId,proto3" json:"loader_id,omitempty"`
	Content       []byte                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	IsLastChunk   bool                   `protobuf:"varint,4,opt,name=is_last_chunk,json=isLastChunk,proto3" json:"is_last_chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendLoaderRequest) Reset() {
	*x = SendLoaderRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendLoaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLoaderRequest) ProtoMessage() {}

func (x *SendLoaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLoaderRequest.ProtoReflect.Descriptor instead.
func (*SendLoaderRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{18}
}

func (x *SendLoaderRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SendLoaderRequest) GetLoaderId() string {
	if x != nil {
		return x.LoaderId
	}
	return ""
}

func (x *SendLoaderRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *SendLoaderRequest) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

type SendLoaderResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendLoaderResponse) Reset() {
	*x = SendLoaderResponse{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendLoaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLoaderResponse) ProtoMessage() {}

func (x *SendLoaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLoaderResponse.ProtoReflect.Descriptor instead.
func (*SendLoaderResponse) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{19}
}

type SendAuthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	AuthId        string                 `protobuf:"bytes,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	Auth          *Auth                  `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	IsDefault     bool                   `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendAuthRequest) Reset() {
	*x = SendAuthRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAuthRequest) ProtoMessage() {}

func (x *SendAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAuthRequest.ProtoReflect.Descriptor instead.
func (*SendAuthRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{20}
}

func (x *SendAuthRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SendAuthRequest) GetAuthId() string {
	if x != nil {
		return x.AuthId
	}
	return ""
}

func (x *SendAuthRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SendAuthRequest) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type SendAuthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendAuthResponse) Reset() {
	*x = SendAuthResponse{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAuthResponse) ProtoMessage() {}

func (x *SendAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAuthResponse.ProtoReflect.Descriptor instead.
func (*SendAuthResponse) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{21}
}

type SendStoreDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	IsLastChunk   bool                   `protobuf:"varint,3,opt,name=is_last_chunk,json=isLastChunk,proto3" json:"is_last_chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendStoreDataRequest) Reset() {
	*x = SendStoreDataRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendStoreDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendStoreDataRequest) ProtoMessage() {}

func (x *SendStoreDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendStoreDataRequest.ProtoReflect.Descriptor instead.
func (*SendStoreDataRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{22}
}

func (x *SendStoreDataRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SendStoreDataRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendStoreDataRequest) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

type SendStoreDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendStoreDataResponse) Reset() {
	*x = SendStoreDataResponse{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendStoreDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendStoreDataResponse) ProtoMessage() {}

func (x *SendStoreDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendStoreDataResponse.ProtoReflect.Descriptor instead.
func (*SendStoreDataResponse) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{23}
}

type SendStoreOkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendStoreOkRequest) Reset() {
	*x = SendStoreOkRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendStoreOkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendStoreOkRequest) ProtoMessage() {}

func (x *SendStoreOkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendStoreOkRequest.ProtoReflect.Descriptor instead.
func (*SendStoreOkRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{24}
}

func (x *SendStoreOkRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type SendStoreOkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendStoreOkResponse) Reset() {
	*x = SendStoreOkResponse{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendStoreOkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendStoreOkResponse) ProtoMessage() {}

func (x *SendStoreOkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendStoreOkResponse.ProtoReflect.Descriptor instead.
func (*SendStoreOkResponse) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{25}
}

type SendTargetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	TargetId      string                 `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Target        *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendTargetRequest) Reset() {
	*x = SendTargetRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTargetRequest) ProtoMessage() {}

func (x *SendTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTargetRequest.ProtoReflect.Descriptor instead.
func (*SendTargetRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{26}
}

func (x *SendTargetRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SendTargetRequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *SendTargetRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

type SendTargetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendTargetResponse) Reset() {
	*x = SendTargetResponse{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTargetResponse) ProtoMessage() {}

func (x *SendTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTargetResponse.ProtoReflect.Descriptor instead.
func (*SendTargetResponse) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{27}
}

type ReceiveLoadTermChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	CommandId     string                 `protobuf:"bytes,2,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceiveLoadTermChannelRequest) Reset() {
	*x = ReceiveLoadTermChannelRequest{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveLoadTermChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveLoadTermChannelRequest) ProtoMessage() {}

func (x *ReceiveLoadTermChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveLoadTermChannelRequest.ProtoReflect.Descriptor instead.
func (*ReceiveLoadTermChannelRequest) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{28}
}

func (x *ReceiveLoadTermChannelRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *ReceiveLoadTermChannelRequest) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

type ReceiveLoadTermChannelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceiveLoadTermChannelResponse) Reset() {
	*x = ReceiveLoadTermChannelResponse{}
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveLoadTermChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveLoadTermChannelResponse) ProtoMessage() {}

func (x *ReceiveLoadTermChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_bloader_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveLoadTermChannelResponse.ProtoReflect.Descriptor instead.
func (*ReceiveLoadTermChannelResponse) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP(), []int{29}
}

func (x *ReceiveLoadTermChannelResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_cresplanex_bloader_v1_bloader_proto protoreflect.FileDescriptor

var file_cresplanex_bloader_v1_bloader_proto_rawDesc = []byte{
	0x0a, 0x23, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2f, 0x62, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x63, 0x72,
	0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2f, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2f, 0x62, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x32, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x38,
	0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78,
	0x0a, 0x13, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x35, 0x0a, 0x14, 0x53, 0x6c, 0x61, 0x76,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22,
	0x82, 0x02, 0x0a, 0x1f, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x72,
	0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x6c,
	0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22,
	0xf4, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49,
	0x64, 0x12, 0x4a, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x4c,
	0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78,
	0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x45, 0x78, 0x65, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x54, 0x54, 0x50, 0x48, 0x00,
	0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x74, 0x74, 0x70, 0x42, 0x08, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x28, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78,
	0x65, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x54, 0x54, 0x50, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x42, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc0, 0x05, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x72, 0x65,
	0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7a, 0x0a, 0x17, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63,
	0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x15, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x77, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x7a, 0x0a, 0x17, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x29, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4c,
	0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x61, 0x0a, 0x27, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x22, 0x65, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x74, 0x0a, 0x28, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x22, 0x48, 0x0a, 0x29, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x11,
	0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x14, 0x0a, 0x12, 0x53,
	0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x72,
	0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x12, 0x0a,
	0x10, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x6d, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x12, 0x53, 0x65, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x15,
	0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x14,
	0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0xe7, 0x01, 0x0a, 0x1c, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4c, 0x41, 0x56,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d,
	0x53, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x10, 0x03, 0x2a,
	0x5b, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x01, 0x2a, 0xe8, 0x01, 0x0a,
	0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x04, 0x12, 0x28, 0x0a,
	0x24, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x05, 0x32, 0xaf, 0x0a, 0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x58, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x25, 0x2e, 0x63, 0x72, 0x65,
	0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0a, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x28, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0c,
	0x53, 0x6c, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2a, 0x2e, 0x63,
	0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x36, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e,
	0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x76, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x72, 0x65,
	0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x5d, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x65,
	0x63, 0x12, 0x26, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x72, 0x65, 0x73,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x32, 0x2e,
	0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64,
	0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x5b, 0x0a,
	0x08, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x12, 0x26, 0x2e, 0x63, 0x72, 0x65, 0x73,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0d, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x2e, 0x63, 0x72,
	0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x64, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x6b, 0x12, 0x29, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e,
	0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x4f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61,
	0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x63,
	0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x61,
	0x64, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x34, 0x2e, 0x63,
	0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x54, 0x65, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e,
	0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xe5, 0x01, 0x0a, 0x19, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x42, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2f, 0x62,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x72,
	0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2f, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x3b, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x43, 0x42, 0x58, 0xaa, 0x02, 0x15, 0x43, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78,
	0x2e, 0x42, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x15, 0x43, 0x72,
	0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x5c, 0x42, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x21, 0x43, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78,
	0x5c, 0x42, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x43, 0x72, 0x65, 0x73, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x78, 0x3a, 0x3a, 0x42, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cresplanex_bloader_v1_bloader_proto_rawDescOnce sync.Once
	file_cresplanex_bloader_v1_bloader_proto_rawDescData = file_cresplanex_bloader_v1_bloader_proto_rawDesc
)

func file_cresplanex_bloader_v1_bloader_proto_rawDescGZIP() []byte {
	file_cresplanex_bloader_v1_bloader_proto_rawDescOnce.Do(func() {
		file_cresplanex_bloader_v1_bloader_proto_rawDescData = protoimpl.X.CompressGZIP(file_cresplanex_bloader_v1_bloader_proto_rawDescData)
	})
	return file_cresplanex_bloader_v1_bloader_proto_rawDescData
}

var file_cresplanex_bloader_v1_bloader_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cresplanex_bloader_v1_bloader_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_cresplanex_bloader_v1_bloader_proto_goTypes = []any{
	(SlaveCommandDefaultStoreType)(0),                 // 0: cresplanex.bloader.v1.SlaveCommandDefaultStoreType
	(CallExecOutputType)(0),                           // 1: cresplanex.bloader.v1.CallExecOutputType
	(RequestType)(0),                                  // 2: cresplanex.bloader.v1.RequestType
	(*ConnectRequest)(nil),                            // 3: cresplanex.bloader.v1.ConnectRequest
	(*ConnectResponse)(nil),                           // 4: cresplanex.bloader.v1.ConnectResponse
	(*DisconnectRequest)(nil),                         // 5: cresplanex.bloader.v1.DisconnectRequest
	(*DisconnectResponse)(nil),                        // 6: cresplanex.bloader.v1.DisconnectResponse
	(*SlaveCommandRequest)(nil),                       // 7: cresplanex.bloader.v1.SlaveCommandRequest
	(*SlaveCommandResponse)(nil),                      // 8: cresplanex.bloader.v1.SlaveCommandResponse
	(*SlaveCommandDefaultStoreRequest)(nil),           // 9: cresplanex.bloader.v1.SlaveCommandDefaultStoreRequest
	(*SlaveCommandDefaultStoreResponse)(nil),          // 10: cresplanex.bloader.v1.SlaveCommandDefaultStoreResponse
	(*CallExecRequest)(nil),                           // 11: cresplanex.bloader.v1.CallExecRequest
	(*CallExecResponse)(nil),                          // 12: cresplanex.bloader.v1.CallExecResponse
	(*CallExecOutputHTTP)(nil),                        // 13: cresplanex.bloader.v1.CallExecOutputHTTP
	(*ReceiveChanelConnectRequest)(nil),               // 14: cresplanex.bloader.v1.ReceiveChanelConnectRequest
	(*ReceiveChanelConnectResponse)(nil),              // 15: cresplanex.bloader.v1.ReceiveChanelConnectResponse
	(*ReceiveChanelConnectLoaderResourceRequest)(nil), // 16: cresplanex.bloader.v1.ReceiveChanelConnectLoaderResourceRequest
	(*ReceiveChanelConnectAuthResourceRequest)(nil),   // 17: cresplanex.bloader.v1.ReceiveChanelConnectAuthResourceRequest
	(*ReceiveChanelConnectStore)(nil),                 // 18: cresplanex.bloader.v1.ReceiveChanelConnectStore
	(*ReceiveChanelConnectStoreResourceRequest)(nil),  // 19: cresplanex.bloader.v1.ReceiveChanelConnectStoreResourceRequest
	(*ReceiveChanelConnectTargetResourceRequest)(nil), // 20: cresplanex.bloader.v1.ReceiveChanelConnectTargetResourceRequest
	(*SendLoaderRequest)(nil),                         // 21: cresplanex.bloader.v1.SendLoaderRequest
	(*SendLoaderResponse)(nil),                        // 22: cresplanex.bloader.v1.SendLoaderResponse
	(*SendAuthRequest)(nil),                           // 23: cresplanex.bloader.v1.SendAuthRequest
	(*SendAuthResponse)(nil),                          // 24: cresplanex.bloader.v1.SendAuthResponse
	(*SendStoreDataRequest)(nil),                      // 25: cresplanex.bloader.v1.SendStoreDataRequest
	(*SendStoreDataResponse)(nil),                     // 26: cresplanex.bloader.v1.SendStoreDataResponse
	(*SendStoreOkRequest)(nil),                        // 27: cresplanex.bloader.v1.SendStoreOkRequest
	(*SendStoreOkResponse)(nil),                       // 28: cresplanex.bloader.v1.SendStoreOkResponse
	(*SendTargetRequest)(nil),                         // 29: cresplanex.bloader.v1.SendTargetRequest
	(*SendTargetResponse)(nil),                        // 30: cresplanex.bloader.v1.SendTargetResponse
	(*ReceiveLoadTermChannelRequest)(nil),             // 31: cresplanex.bloader.v1.ReceiveLoadTermChannelRequest
	(*ReceiveLoadTermChannelResponse)(nil),            // 32: cresplanex.bloader.v1.ReceiveLoadTermChannelResponse
	(*Auth)(nil),                                      // 33: cresplanex.bloader.v1.Auth
	(*Target)(nil),                                    // 34: cresplanex.bloader.v1.Target
}
var file_cresplanex_bloader_v1_bloader_proto_depIdxs = []int32{
	0,  // 0: cresplanex.bloader.v1.SlaveCommandDefaultStoreRequest.store_type:type_name -> cresplanex.bloader.v1.SlaveCommandDefaultStoreType
	1,  // 1: cresplanex.bloader.v1.CallExecResponse.output_type:type_name -> cresplanex.bloader.v1.CallExecOutputType
	13, // 2: cresplanex.bloader.v1.CallExecResponse.output_http:type_name -> cresplanex.bloader.v1.CallExecOutputHTTP
	2,  // 3: cresplanex.bloader.v1.ReceiveChanelConnectResponse.request_type:type_name -> cresplanex.bloader.v1.RequestType
	16, // 4: cresplanex.bloader.v1.ReceiveChanelConnectResponse.loader_resource_request:type_name -> cresplanex.bloader.v1.ReceiveChanelConnectLoaderResourceRequest
	17, // 5: cresplanex.bloader.v1.ReceiveChanelConnectResponse.auth_resource_request:type_name -> cresplanex.bloader.v1.ReceiveChanelConnectAuthResourceRequest
	18, // 6: cresplanex.bloader.v1.ReceiveChanelConnectResponse.store:type_name -> cresplanex.bloader.v1.ReceiveChanelConnectStore
	19, // 7: cresplanex.bloader.v1.ReceiveChanelConnectResponse.store_resource_request:type_name -> cresplanex.bloader.v1.ReceiveChanelConnectStoreResourceRequest
	20, // 8: cresplanex.bloader.v1.ReceiveChanelConnectResponse.target_resource_request:type_name -> cresplanex.bloader.v1.ReceiveChanelConnectTargetResourceRequest
	33, // 9: cresplanex.bloader.v1.SendAuthRequest.auth:type_name -> cresplanex.bloader.v1.Auth
	34, // 10: cresplanex.bloader.v1.SendTargetRequest.target:type_name -> cresplanex.bloader.v1.Target
	3,  // 11: cresplanex.bloader.v1.BloaderSlaveService.Connect:input_type -> cresplanex.bloader.v1.ConnectRequest
	5,  // 12: cresplanex.bloader.v1.BloaderSlaveService.Disconnect:input_type -> cresplanex.bloader.v1.DisconnectRequest
	7,  // 13: cresplanex.bloader.v1.BloaderSlaveService.SlaveCommand:input_type -> cresplanex.bloader.v1.SlaveCommandRequest
	9,  // 14: cresplanex.bloader.v1.BloaderSlaveService.SlaveCommandDefaultStore:input_type -> cresplanex.bloader.v1.SlaveCommandDefaultStoreRequest
	11, // 15: cresplanex.bloader.v1.BloaderSlaveService.CallExec:input_type -> cresplanex.bloader.v1.CallExecRequest
	14, // 16: cresplanex.bloader.v1.BloaderSlaveService.ReceiveChanelConnect:input_type -> cresplanex.bloader.v1.ReceiveChanelConnectRequest
	21, // 17: cresplanex.bloader.v1.BloaderSlaveService.SendLoader:input_type -> cresplanex.bloader.v1.SendLoaderRequest
	23, // 18: cresplanex.bloader.v1.BloaderSlaveService.SendAuth:input_type -> cresplanex.bloader.v1.SendAuthRequest
	25, // 19: cresplanex.bloader.v1.BloaderSlaveService.SendStoreData:input_type -> cresplanex.bloader.v1.SendStoreDataRequest
	27, // 20: cresplanex.bloader.v1.BloaderSlaveService.SendStoreOk:input_type -> cresplanex.bloader.v1.SendStoreOkRequest
	29, // 21: cresplanex.bloader.v1.BloaderSlaveService.SendTarget:input_type -> cresplanex.bloader.v1.SendTargetRequest
	31, // 22: cresplanex.bloader.v1.BloaderSlaveService.ReceiveLoadTermChannel:input_type -> cresplanex.bloader.v1.ReceiveLoadTermChannelRequest
	4,  // 23: cresplanex.bloader.v1.BloaderSlaveService.Connect:output_type -> cresplanex.bloader.v1.ConnectResponse
	6,  // 24: cresplanex.bloader.v1.BloaderSlaveService.Disconnect:output_type -> cresplanex.bloader.v1.DisconnectResponse
	8,  // 25: cresplanex.bloader.v1.BloaderSlaveService.SlaveCommand:output_type -> cresplanex.bloader.v1.SlaveCommandResponse
	10, // 26: cresplanex.bloader.v1.BloaderSlaveService.SlaveCommandDefaultStore:output_type -> cresplanex.bloader.v1.SlaveCommandDefaultStoreResponse
	12, // 27: cresplanex.bloader.v1.BloaderSlaveService.CallExec:output_type -> cresplanex.bloader.v1.CallExecResponse
	15, // 28: cresplanex.bloader.v1.BloaderSlaveService.ReceiveChanelConnect:output_type -> cresplanex.bloader.v1.ReceiveChanelConnectResponse
	22, // 29: cresplanex.bloader.v1.BloaderSlaveService.SendLoader:output_type -> cresplanex.bloader.v1.SendLoaderResponse
	24, // 30: cresplanex.bloader.v1.BloaderSlaveService.SendAuth:output_type -> cresplanex.bloader.v1.SendAuthResponse
	26, // 31: cresplanex.bloader.v1.BloaderSlaveService.SendStoreData:output_type -> cresplanex.bloader.v1.SendStoreDataResponse
	28, // 32: cresplanex.bloader.v1.BloaderSlaveService.SendStoreOk:output_type -> cresplanex.bloader.v1.SendStoreOkResponse
	30, // 33: cresplanex.bloader.v1.BloaderSlaveService.SendTarget:output_type -> cresplanex.bloader.v1.SendTargetResponse
	32, // 34: cresplanex.bloader.v1.BloaderSlaveService.ReceiveLoadTermChannel:output_type -> cresplanex.bloader.v1.ReceiveLoadTermChannelResponse
	23, // [23:35] is the sub-list for method output_type
	11, // [11:23] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_cresplanex_bloader_v1_bloader_proto_init() }
func file_cresplanex_bloader_v1_bloader_proto_init() {
	if File_cresplanex_bloader_v1_bloader_proto != nil {
		return
	}
	file_cresplanex_bloader_v1_auth_proto_init()
	file_cresplanex_bloader_v1_target_proto_init()
	file_cresplanex_bloader_v1_bloader_proto_msgTypes[9].OneofWrappers = []any{
		(*CallExecResponse_OutputHttp)(nil),
	}
	file_cresplanex_bloader_v1_bloader_proto_msgTypes[12].OneofWrappers = []any{
		(*ReceiveChanelConnectResponse_LoaderResourceRequest)(nil),
		(*ReceiveChanelConnectResponse_AuthResourceRequest)(nil),
		(*ReceiveChanelConnectResponse_Store)(nil),
		(*ReceiveChanelConnectResponse_StoreResourceRequest)(nil),
		(*ReceiveChanelConnectResponse_TargetResourceRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cresplanex_bloader_v1_bloader_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cresplanex_bloader_v1_bloader_proto_goTypes,
		DependencyIndexes: file_cresplanex_bloader_v1_bloader_proto_depIdxs,
		EnumInfos:         file_cresplanex_bloader_v1_bloader_proto_enumTypes,
		MessageInfos:      file_cresplanex_bloader_v1_bloader_proto_msgTypes,
	}.Build()
	File_cresplanex_bloader_v1_bloader_proto = out.File
	file_cresplanex_bloader_v1_bloader_proto_rawDesc = nil
	file_cresplanex_bloader_v1_bloader_proto_goTypes = nil
	file_cresplanex_bloader_v1_bloader_proto_depIdxs = nil
}
