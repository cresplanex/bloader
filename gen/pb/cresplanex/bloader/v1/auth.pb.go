// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: cresplanex/bloader/v1/auth.proto

package bloaderv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthType int32

const (
	AuthType_AUTH_TYPE_UNSPECIFIED AuthType = 0
	AuthType_AUTH_TYPE_OAUTH2      AuthType = 1
	AuthType_AUTH_TYPE_API_KEY     AuthType = 2
	AuthType_AUTH_TYPE_BASIC       AuthType = 3
	AuthType_AUTH_TYPE_PRIVATE_KEY AuthType = 4
	AuthType_AUTH_TYPE_JWT         AuthType = 5
)

// Enum value maps for AuthType.
var (
	AuthType_name = map[int32]string{
		0: "AUTH_TYPE_UNSPECIFIED",
		1: "AUTH_TYPE_OAUTH2",
		2: "AUTH_TYPE_API_KEY",
		3: "AUTH_TYPE_BASIC",
		4: "AUTH_TYPE_PRIVATE_KEY",
		5: "AUTH_TYPE_JWT",
	}
	AuthType_value = map[string]int32{
		"AUTH_TYPE_UNSPECIFIED": 0,
		"AUTH_TYPE_OAUTH2":      1,
		"AUTH_TYPE_API_KEY":     2,
		"AUTH_TYPE_BASIC":       3,
		"AUTH_TYPE_PRIVATE_KEY": 4,
		"AUTH_TYPE_JWT":         5,
	}
)

func (x AuthType) Enum() *AuthType {
	p := new(AuthType)
	*p = x
	return p
}

func (x AuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_cresplanex_bloader_v1_auth_proto_enumTypes[0].Descriptor()
}

func (AuthType) Type() protoreflect.EnumType {
	return &file_cresplanex_bloader_v1_auth_proto_enumTypes[0]
}

func (x AuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthType.Descriptor instead.
func (AuthType) EnumDescriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_auth_proto_rawDescGZIP(), []int{0}
}

type Auth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  AuthType               `protobuf:"varint,1,opt,name=type,proto3,enum=cresplanex.bloader.v1.AuthType" json:"type,omitempty"`
	// Types that are valid to be assigned to Auth:
	//
	//	*Auth_Oauth2
	//	*Auth_ApiKey
	//	*Auth_Basic
	//	*Auth_PrivateKey
	//	*Auth_Jwt
	Auth          isAuth_Auth `protobuf_oneof:"auth"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Auth) Reset() {
	*x = Auth{}
	mi := &file_cresplanex_bloader_v1_auth_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_auth_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_auth_proto_rawDescGZIP(), []int{0}
}

func (x *Auth) GetType() AuthType {
	if x != nil {
		return x.Type
	}
	return AuthType_AUTH_TYPE_UNSPECIFIED
}

func (x *Auth) GetAuth() isAuth_Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *Auth) GetOauth2() *AuthOAuth2 {
	if x != nil {
		if x, ok := x.Auth.(*Auth_Oauth2); ok {
			return x.Oauth2
		}
	}
	return nil
}

func (x *Auth) GetApiKey() *AuthApiKey {
	if x != nil {
		if x, ok := x.Auth.(*Auth_ApiKey); ok {
			return x.ApiKey
		}
	}
	return nil
}

func (x *Auth) GetBasic() *AuthBasic {
	if x != nil {
		if x, ok := x.Auth.(*Auth_Basic); ok {
			return x.Basic
		}
	}
	return nil
}

func (x *Auth) GetPrivateKey() *AuthPrivateKey {
	if x != nil {
		if x, ok := x.Auth.(*Auth_PrivateKey); ok {
			return x.PrivateKey
		}
	}
	return nil
}

func (x *Auth) GetJwt() *AuthJwt {
	if x != nil {
		if x, ok := x.Auth.(*Auth_Jwt); ok {
			return x.Jwt
		}
	}
	return nil
}

type isAuth_Auth interface {
	isAuth_Auth()
}

type Auth_Oauth2 struct {
	Oauth2 *AuthOAuth2 `protobuf:"bytes,2,opt,name=oauth2,proto3,oneof"`
}

type Auth_ApiKey struct {
	ApiKey *AuthApiKey `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3,oneof"`
}

type Auth_Basic struct {
	Basic *AuthBasic `protobuf:"bytes,4,opt,name=basic,proto3,oneof"`
}

type Auth_PrivateKey struct {
	PrivateKey *AuthPrivateKey `protobuf:"bytes,5,opt,name=private_key,json=privateKey,proto3,oneof"`
}

type Auth_Jwt struct {
	Jwt *AuthJwt `protobuf:"bytes,6,opt,name=jwt,proto3,oneof"`
}

func (*Auth_Oauth2) isAuth_Auth() {}

func (*Auth_ApiKey) isAuth_Auth() {}

func (*Auth_Basic) isAuth_Auth() {}

func (*Auth_PrivateKey) isAuth_Auth() {}

func (*Auth_Jwt) isAuth_Auth() {}

type AuthOAuth2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessToken   string                 `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	TokenType     string                 `protobuf:"bytes,2,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthOAuth2) Reset() {
	*x = AuthOAuth2{}
	mi := &file_cresplanex_bloader_v1_auth_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthOAuth2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthOAuth2) ProtoMessage() {}

func (x *AuthOAuth2) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_auth_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthOAuth2.ProtoReflect.Descriptor instead.
func (*AuthOAuth2) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_auth_proto_rawDescGZIP(), []int{1}
}

func (x *AuthOAuth2) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *AuthOAuth2) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

type AuthApiKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        string                 `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	HeaderName    string                 `protobuf:"bytes,2,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthApiKey) Reset() {
	*x = AuthApiKey{}
	mi := &file_cresplanex_bloader_v1_auth_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthApiKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthApiKey) ProtoMessage() {}

func (x *AuthApiKey) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_auth_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthApiKey.ProtoReflect.Descriptor instead.
func (*AuthApiKey) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_auth_proto_rawDescGZIP(), []int{2}
}

func (x *AuthApiKey) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *AuthApiKey) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

type AuthBasic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthBasic) Reset() {
	*x = AuthBasic{}
	mi := &file_cresplanex_bloader_v1_auth_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthBasic) ProtoMessage() {}

func (x *AuthBasic) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_auth_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthBasic.ProtoReflect.Descriptor instead.
func (*AuthBasic) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_auth_proto_rawDescGZIP(), []int{3}
}

func (x *AuthBasic) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthBasic) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthPrivateKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PrivateKey    string                 `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthPrivateKey) Reset() {
	*x = AuthPrivateKey{}
	mi := &file_cresplanex_bloader_v1_auth_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthPrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthPrivateKey) ProtoMessage() {}

func (x *AuthPrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_auth_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthPrivateKey.ProtoReflect.Descriptor instead.
func (*AuthPrivateKey) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_auth_proto_rawDescGZIP(), []int{4}
}

func (x *AuthPrivateKey) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type AuthJwt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Jwt           string                 `protobuf:"bytes,1,opt,name=jwt,proto3" json:"jwt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthJwt) Reset() {
	*x = AuthJwt{}
	mi := &file_cresplanex_bloader_v1_auth_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthJwt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthJwt) ProtoMessage() {}

func (x *AuthJwt) ProtoReflect() protoreflect.Message {
	mi := &file_cresplanex_bloader_v1_auth_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthJwt.ProtoReflect.Descriptor instead.
func (*AuthJwt) Descriptor() ([]byte, []int) {
	return file_cresplanex_bloader_v1_auth_proto_rawDescGZIP(), []int{5}
}

func (x *AuthJwt) GetJwt() string {
	if x != nil {
		return x.Jwt
	}
	return ""
}

var File_cresplanex_bloader_v1_auth_proto protoreflect.FileDescriptor

var file_cresplanex_bloader_v1_auth_proto_rawDesc = []byte{
	0x0a, 0x20, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2f, 0x62, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x15, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0xf6, 0x02, 0x0a, 0x04, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x32, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x48, 0x00, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x12, 0x48, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78,
	0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x4a, 0x77, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x77, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x22, 0x4e, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x46, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x09, 0x41, 0x75,
	0x74, 0x68, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x31, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x22, 0x1b, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x68, 0x4a, 0x77, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6a, 0x77, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x77, 0x74, 0x2a,
	0x95, 0x01, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4b,
	0x45, 0x59, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4b,
	0x45, 0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4a, 0x57, 0x54, 0x10, 0x05, 0x42, 0xe2, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x62, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2f, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x78, 0x2f, 0x62, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x62,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x42, 0x58, 0xaa, 0x02,
	0x15, 0x43, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x2e, 0x42, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x15, 0x43, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x78, 0x5c, 0x42, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x21, 0x43, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x5c, 0x42, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x17, 0x43, 0x72, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x78, 0x3a,
	0x3a, 0x42, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cresplanex_bloader_v1_auth_proto_rawDescOnce sync.Once
	file_cresplanex_bloader_v1_auth_proto_rawDescData = file_cresplanex_bloader_v1_auth_proto_rawDesc
)

func file_cresplanex_bloader_v1_auth_proto_rawDescGZIP() []byte {
	file_cresplanex_bloader_v1_auth_proto_rawDescOnce.Do(func() {
		file_cresplanex_bloader_v1_auth_proto_rawDescData = protoimpl.X.CompressGZIP(file_cresplanex_bloader_v1_auth_proto_rawDescData)
	})
	return file_cresplanex_bloader_v1_auth_proto_rawDescData
}

var file_cresplanex_bloader_v1_auth_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cresplanex_bloader_v1_auth_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cresplanex_bloader_v1_auth_proto_goTypes = []any{
	(AuthType)(0),          // 0: cresplanex.bloader.v1.AuthType
	(*Auth)(nil),           // 1: cresplanex.bloader.v1.Auth
	(*AuthOAuth2)(nil),     // 2: cresplanex.bloader.v1.AuthOAuth2
	(*AuthApiKey)(nil),     // 3: cresplanex.bloader.v1.AuthApiKey
	(*AuthBasic)(nil),      // 4: cresplanex.bloader.v1.AuthBasic
	(*AuthPrivateKey)(nil), // 5: cresplanex.bloader.v1.AuthPrivateKey
	(*AuthJwt)(nil),        // 6: cresplanex.bloader.v1.AuthJwt
}
var file_cresplanex_bloader_v1_auth_proto_depIdxs = []int32{
	0, // 0: cresplanex.bloader.v1.Auth.type:type_name -> cresplanex.bloader.v1.AuthType
	2, // 1: cresplanex.bloader.v1.Auth.oauth2:type_name -> cresplanex.bloader.v1.AuthOAuth2
	3, // 2: cresplanex.bloader.v1.Auth.api_key:type_name -> cresplanex.bloader.v1.AuthApiKey
	4, // 3: cresplanex.bloader.v1.Auth.basic:type_name -> cresplanex.bloader.v1.AuthBasic
	5, // 4: cresplanex.bloader.v1.Auth.private_key:type_name -> cresplanex.bloader.v1.AuthPrivateKey
	6, // 5: cresplanex.bloader.v1.Auth.jwt:type_name -> cresplanex.bloader.v1.AuthJwt
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_cresplanex_bloader_v1_auth_proto_init() }
func file_cresplanex_bloader_v1_auth_proto_init() {
	if File_cresplanex_bloader_v1_auth_proto != nil {
		return
	}
	file_cresplanex_bloader_v1_auth_proto_msgTypes[0].OneofWrappers = []any{
		(*Auth_Oauth2)(nil),
		(*Auth_ApiKey)(nil),
		(*Auth_Basic)(nil),
		(*Auth_PrivateKey)(nil),
		(*Auth_Jwt)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cresplanex_bloader_v1_auth_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cresplanex_bloader_v1_auth_proto_goTypes,
		DependencyIndexes: file_cresplanex_bloader_v1_auth_proto_depIdxs,
		EnumInfos:         file_cresplanex_bloader_v1_auth_proto_enumTypes,
		MessageInfos:      file_cresplanex_bloader_v1_auth_proto_msgTypes,
	}.Build()
	File_cresplanex_bloader_v1_auth_proto = out.File
	file_cresplanex_bloader_v1_auth_proto_rawDesc = nil
	file_cresplanex_bloader_v1_auth_proto_goTypes = nil
	file_cresplanex_bloader_v1_auth_proto_depIdxs = nil
}
